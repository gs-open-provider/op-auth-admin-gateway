// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RefreshTokenHandlerFunc turns a function with the right signature into a refresh token handler
type RefreshTokenHandlerFunc func(RefreshTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RefreshTokenHandlerFunc) Handle(params RefreshTokenParams) middleware.Responder {
	return fn(params)
}

// RefreshTokenHandler interface for that can handle valid refresh token params
type RefreshTokenHandler interface {
	Handle(RefreshTokenParams) middleware.Responder
}

// NewRefreshToken creates a new http.Handler for the refresh token operation
func NewRefreshToken(ctx *middleware.Context, handler RefreshTokenHandler) *RefreshToken {
	return &RefreshToken{Context: ctx, Handler: handler}
}

/*RefreshToken swagger:route GET /v1/auth/refresh-token auth refreshToken

RefreshToken refresh token API

*/
type RefreshToken struct {
	Context *middleware.Context
	Handler RefreshTokenHandler
}

func (o *RefreshToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRefreshTokenParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
