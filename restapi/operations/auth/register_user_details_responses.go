// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gs-open-provider/op-auth-admin-gateway/models"
)

// RegisterUserDetailsOKCode is the HTTP code returned for type RegisterUserDetailsOK
const RegisterUserDetailsOKCode int = 200

/*RegisterUserDetailsOK OK

swagger:response registerUserDetailsOK
*/
type RegisterUserDetailsOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterUserDetailsOK creates RegisterUserDetailsOK with default headers values
func NewRegisterUserDetailsOK() *RegisterUserDetailsOK {

	return &RegisterUserDetailsOK{}
}

// WithPayload adds the payload to the register user details o k response
func (o *RegisterUserDetailsOK) WithPayload(payload *models.GeneralResponse) *RegisterUserDetailsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user details o k response
func (o *RegisterUserDetailsOK) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserDetailsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUserDetailsBadRequestCode is the HTTP code returned for type RegisterUserDetailsBadRequest
const RegisterUserDetailsBadRequestCode int = 400

/*RegisterUserDetailsBadRequest BAD REQUEST

swagger:response registerUserDetailsBadRequest
*/
type RegisterUserDetailsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterUserDetailsBadRequest creates RegisterUserDetailsBadRequest with default headers values
func NewRegisterUserDetailsBadRequest() *RegisterUserDetailsBadRequest {

	return &RegisterUserDetailsBadRequest{}
}

// WithPayload adds the payload to the register user details bad request response
func (o *RegisterUserDetailsBadRequest) WithPayload(payload *models.GeneralResponse) *RegisterUserDetailsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user details bad request response
func (o *RegisterUserDetailsBadRequest) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserDetailsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUserDetailsUnauthorizedCode is the HTTP code returned for type RegisterUserDetailsUnauthorized
const RegisterUserDetailsUnauthorizedCode int = 401

/*RegisterUserDetailsUnauthorized UNAUTHORIZED

swagger:response registerUserDetailsUnauthorized
*/
type RegisterUserDetailsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterUserDetailsUnauthorized creates RegisterUserDetailsUnauthorized with default headers values
func NewRegisterUserDetailsUnauthorized() *RegisterUserDetailsUnauthorized {

	return &RegisterUserDetailsUnauthorized{}
}

// WithPayload adds the payload to the register user details unauthorized response
func (o *RegisterUserDetailsUnauthorized) WithPayload(payload *models.GeneralResponse) *RegisterUserDetailsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user details unauthorized response
func (o *RegisterUserDetailsUnauthorized) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserDetailsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUserDetailsForbiddenCode is the HTTP code returned for type RegisterUserDetailsForbidden
const RegisterUserDetailsForbiddenCode int = 403

/*RegisterUserDetailsForbidden FORBIDDEN

swagger:response registerUserDetailsForbidden
*/
type RegisterUserDetailsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterUserDetailsForbidden creates RegisterUserDetailsForbidden with default headers values
func NewRegisterUserDetailsForbidden() *RegisterUserDetailsForbidden {

	return &RegisterUserDetailsForbidden{}
}

// WithPayload adds the payload to the register user details forbidden response
func (o *RegisterUserDetailsForbidden) WithPayload(payload *models.GeneralResponse) *RegisterUserDetailsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user details forbidden response
func (o *RegisterUserDetailsForbidden) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserDetailsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUserDetailsNotFoundCode is the HTTP code returned for type RegisterUserDetailsNotFound
const RegisterUserDetailsNotFoundCode int = 404

/*RegisterUserDetailsNotFound NOT FOUND

swagger:response registerUserDetailsNotFound
*/
type RegisterUserDetailsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterUserDetailsNotFound creates RegisterUserDetailsNotFound with default headers values
func NewRegisterUserDetailsNotFound() *RegisterUserDetailsNotFound {

	return &RegisterUserDetailsNotFound{}
}

// WithPayload adds the payload to the register user details not found response
func (o *RegisterUserDetailsNotFound) WithPayload(payload *models.GeneralResponse) *RegisterUserDetailsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user details not found response
func (o *RegisterUserDetailsNotFound) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserDetailsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterUserDetailsInternalServerErrorCode is the HTTP code returned for type RegisterUserDetailsInternalServerError
const RegisterUserDetailsInternalServerErrorCode int = 500

/*RegisterUserDetailsInternalServerError INTERNAL SERVER ERROR

swagger:response registerUserDetailsInternalServerError
*/
type RegisterUserDetailsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterUserDetailsInternalServerError creates RegisterUserDetailsInternalServerError with default headers values
func NewRegisterUserDetailsInternalServerError() *RegisterUserDetailsInternalServerError {

	return &RegisterUserDetailsInternalServerError{}
}

// WithPayload adds the payload to the register user details internal server error response
func (o *RegisterUserDetailsInternalServerError) WithPayload(payload *models.GeneralResponse) *RegisterUserDetailsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register user details internal server error response
func (o *RegisterUserDetailsInternalServerError) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterUserDetailsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
