// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gs-open-provider/op-auth-admin-gateway/models"
)

// RegisterConfirmationOKCode is the HTTP code returned for type RegisterConfirmationOK
const RegisterConfirmationOKCode int = 200

/*RegisterConfirmationOK OK

swagger:response registerConfirmationOK
*/
type RegisterConfirmationOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterConfirmationOK creates RegisterConfirmationOK with default headers values
func NewRegisterConfirmationOK() *RegisterConfirmationOK {

	return &RegisterConfirmationOK{}
}

// WithPayload adds the payload to the register confirmation o k response
func (o *RegisterConfirmationOK) WithPayload(payload *models.GeneralResponse) *RegisterConfirmationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register confirmation o k response
func (o *RegisterConfirmationOK) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConfirmationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterConfirmationBadRequestCode is the HTTP code returned for type RegisterConfirmationBadRequest
const RegisterConfirmationBadRequestCode int = 400

/*RegisterConfirmationBadRequest BAD REQUEST

swagger:response registerConfirmationBadRequest
*/
type RegisterConfirmationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterConfirmationBadRequest creates RegisterConfirmationBadRequest with default headers values
func NewRegisterConfirmationBadRequest() *RegisterConfirmationBadRequest {

	return &RegisterConfirmationBadRequest{}
}

// WithPayload adds the payload to the register confirmation bad request response
func (o *RegisterConfirmationBadRequest) WithPayload(payload *models.GeneralResponse) *RegisterConfirmationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register confirmation bad request response
func (o *RegisterConfirmationBadRequest) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConfirmationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterConfirmationUnauthorizedCode is the HTTP code returned for type RegisterConfirmationUnauthorized
const RegisterConfirmationUnauthorizedCode int = 401

/*RegisterConfirmationUnauthorized UNAUTHORIZED

swagger:response registerConfirmationUnauthorized
*/
type RegisterConfirmationUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterConfirmationUnauthorized creates RegisterConfirmationUnauthorized with default headers values
func NewRegisterConfirmationUnauthorized() *RegisterConfirmationUnauthorized {

	return &RegisterConfirmationUnauthorized{}
}

// WithPayload adds the payload to the register confirmation unauthorized response
func (o *RegisterConfirmationUnauthorized) WithPayload(payload *models.GeneralResponse) *RegisterConfirmationUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register confirmation unauthorized response
func (o *RegisterConfirmationUnauthorized) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConfirmationUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterConfirmationForbiddenCode is the HTTP code returned for type RegisterConfirmationForbidden
const RegisterConfirmationForbiddenCode int = 403

/*RegisterConfirmationForbidden FORBIDDEN

swagger:response registerConfirmationForbidden
*/
type RegisterConfirmationForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterConfirmationForbidden creates RegisterConfirmationForbidden with default headers values
func NewRegisterConfirmationForbidden() *RegisterConfirmationForbidden {

	return &RegisterConfirmationForbidden{}
}

// WithPayload adds the payload to the register confirmation forbidden response
func (o *RegisterConfirmationForbidden) WithPayload(payload *models.GeneralResponse) *RegisterConfirmationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register confirmation forbidden response
func (o *RegisterConfirmationForbidden) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConfirmationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterConfirmationNotFoundCode is the HTTP code returned for type RegisterConfirmationNotFound
const RegisterConfirmationNotFoundCode int = 404

/*RegisterConfirmationNotFound NOT FOUND

swagger:response registerConfirmationNotFound
*/
type RegisterConfirmationNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterConfirmationNotFound creates RegisterConfirmationNotFound with default headers values
func NewRegisterConfirmationNotFound() *RegisterConfirmationNotFound {

	return &RegisterConfirmationNotFound{}
}

// WithPayload adds the payload to the register confirmation not found response
func (o *RegisterConfirmationNotFound) WithPayload(payload *models.GeneralResponse) *RegisterConfirmationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register confirmation not found response
func (o *RegisterConfirmationNotFound) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConfirmationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterConfirmationInternalServerErrorCode is the HTTP code returned for type RegisterConfirmationInternalServerError
const RegisterConfirmationInternalServerErrorCode int = 500

/*RegisterConfirmationInternalServerError INTERNAL SERVER ERROR

swagger:response registerConfirmationInternalServerError
*/
type RegisterConfirmationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralResponse `json:"body,omitempty"`
}

// NewRegisterConfirmationInternalServerError creates RegisterConfirmationInternalServerError with default headers values
func NewRegisterConfirmationInternalServerError() *RegisterConfirmationInternalServerError {

	return &RegisterConfirmationInternalServerError{}
}

// WithPayload adds the payload to the register confirmation internal server error response
func (o *RegisterConfirmationInternalServerError) WithPayload(payload *models.GeneralResponse) *RegisterConfirmationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register confirmation internal server error response
func (o *RegisterConfirmationInternalServerError) SetPayload(payload *models.GeneralResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterConfirmationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
