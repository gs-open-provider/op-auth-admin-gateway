// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RegisterCalbackHandlerFunc turns a function with the right signature into a register calback handler
type RegisterCalbackHandlerFunc func(RegisterCalbackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterCalbackHandlerFunc) Handle(params RegisterCalbackParams) middleware.Responder {
	return fn(params)
}

// RegisterCalbackHandler interface for that can handle valid register calback params
type RegisterCalbackHandler interface {
	Handle(RegisterCalbackParams) middleware.Responder
}

// NewRegisterCalback creates a new http.Handler for the register calback operation
func NewRegisterCalback(ctx *middleware.Context, handler RegisterCalbackHandler) *RegisterCalback {
	return &RegisterCalback{Context: ctx, Handler: handler}
}

/*RegisterCalback swagger:route GET /v1/oauth2/oauth-signup-cb auth registerCalback

RegisterCalback register calback API

*/
type RegisterCalback struct {
	Context *middleware.Context
	Handler RegisterCalbackHandler
}

func (o *RegisterCalback) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterCalbackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
