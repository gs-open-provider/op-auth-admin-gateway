// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RegisterConfirmationHandlerFunc turns a function with the right signature into a register confirmation handler
type RegisterConfirmationHandlerFunc func(RegisterConfirmationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterConfirmationHandlerFunc) Handle(params RegisterConfirmationParams) middleware.Responder {
	return fn(params)
}

// RegisterConfirmationHandler interface for that can handle valid register confirmation params
type RegisterConfirmationHandler interface {
	Handle(RegisterConfirmationParams) middleware.Responder
}

// NewRegisterConfirmation creates a new http.Handler for the register confirmation operation
func NewRegisterConfirmation(ctx *middleware.Context, handler RegisterConfirmationHandler) *RegisterConfirmation {
	return &RegisterConfirmation{Context: ctx, Handler: handler}
}

/*RegisterConfirmation swagger:route GET /v1/auth/email-confirmation/{token} auth registerConfirmation

RegisterConfirmation register confirmation API

*/
type RegisterConfirmation struct {
	Context *middleware.Context
	Handler RegisterConfirmationHandler
}

func (o *RegisterConfirmation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterConfirmationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
